function [s, newz, converged] = distddstep(s, oldzvec)
    % Perform one step of the distributed dual descent. s is the structure
    % generated by distddinit() and needs to be saved by the caller for the
    % next step.
    
    p = 1 ./ (1 + exp(s.theta' * s.x));
    llp = p; 
    llp(p < 1e-7) = 1e-7; llp(p > 1-1e-7) = 1-1e-7; % avoid NaN
    ll = sum(s.y .* log(llp) + (1-s.y) .* log(1 - llp));
       
    grad = s.x * (p - s.y)';
    s.daz = sum(repmat(s.adjvec, s.d, 1) .* oldzvec, 2) - grad;
    alpha = s.alphafun(s.iter);
    s.theta = (-alpha / 2) * s.daz;

    s.lldelta = abs(ll - s.llprev);
    s.llprev = ll;
    s.theta_hist = [s.theta_hist s.theta];
    s.llhist = [s.llhist ll];
    s.iter = s.iter + 1;
    
    newz = s.daz;
    converged = s.lldelta < s.precision;
end